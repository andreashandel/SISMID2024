{
  "hash": "c21ad8f76b6625932213b97152e581d7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Bacterial Infection models\"\ndate: \"2024-07-17 14:04:23.59325\"\nauthor: \"[Andreas Handel](https://www.andreashandel.com)\"\nformat: \n  revealjs:\n    theme: default\n    css: \"./media/handelslides.css\"\n    transition: none\n    incremental: false\n    cap-location: bottom\n    self-contained: true\n    slide-number: true\n    show-slide-number: all\n    auto-stretch: true\n    smaller: true\nbibliography: ./media/SMICourse.bib\n---\n\n\n\n## Basic bacteria infection model\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./media/nri_review_fig3a.png){fig-align='center' width=80%}\n:::\n:::\n\n\n\n$$\n\\begin{aligned}\n\\dot{B} & = g B(1-\\frac{B}{B_{max}}) - d_B B - kBI\\\\\n\\dot{I} & = r BI - d_I I\n\\end{aligned}\n$$\n\n-   Can also be other extracellular organisms. Probably not ideal for intra-cellular bacteria (e.g., TB).\n\n## Extended bacteria infection model\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./media/extendedbacteriamodel.png){fig-align='center' width=80%}\n:::\n:::\n\n```{=tex}\n\\begin{align}\n\\dot B &= g B (1-\\frac{B}{B_{max}}) - d_B B - k_I B I - k_A B A \\\\\n\\dot I &= r_I B (1 -\\frac{I}{I_{max}} )  - d_I I \\\\\n\\dot A &= r_A \\frac{\\log(I)}{h+\\log(I)} A  - d_A A\n\\end{align}\n```\n\n\n## Model uses\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./media/nri_review_fig1.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n## Model Exploration\n\n-   Looking at the dynamics (time-series) of a model can be useful.\n-   Often, we are not mainly interested in the time series, but instead some more specific quantity, e.g. total number of pathogen/infected cells, steady state values, etc.\n-   We usually want to to know how such outcome(s) of interest vary with some parameter(s).\n-   What do we need to do to answer that question?\n\n## Model Exploration\n\n1.  Choose some parameter values.\n2.  Run the simulation model.\n3.  Record quantities/outcomes of interest.\n4.  Choose another set of parameter values (usually we only vary one at a time).\n5.  Repeat steps 2-4 until you got all parameter-outcome pairs of interest.\n6.  Report (e.g. plot) your findings.\n\n## Model Exploration example 1\n\n-   Question: How dose the antigen dose for a killed (influenza) vaccine affect antibody levels post vaccination?\n-   Approach: Build a simple model and explore (after [Handel et al 2018 PCB](https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1006505)).\n\n$$\n\\begin{aligned}\n\\dot V &=  - d_V V  - k_A AV \\\\\n\\dot F &= p_F - d_F F + \\frac{V}{V+ h_V}g_F(F_{max}-F)  \\\\ \n\\dot B & = \\frac{F V}{F V + h_F} g_B B \\\\\n\\dot A & = r_A B - d_A A - k_A A V\n\\end{aligned}\n$$ (This is a simpler version of the virus and immune response DSAIRM model.)\n\n## Model Exploration example 1\n\nRun model for different antigen doses ($V_0$).\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./media/inoculum_vaccine_pcb18.png){fig-align='center' width=90%}\n:::\n:::\n\n\n\n## Model Exploration example 1\n\n::: columns\n::: {.column width=\"50%\"}\n-   Run model for different $V_0$, record antibodies $A$ at end of each simulation for each $V_0$.\n-   Use this equation to compute protection as a function of antibody level. $P= 1 - \\frac{1}{e^{k_1(\\log(A)-k_2)}}$\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./media/iavvaccine-inoculum.png){fig-align='center' width=90%}\n:::\n:::\n\n\n:::\n:::\n\n## Model Exploration - Example 2\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./media/stickinessmodel.jpg){fig-align='center'}\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](./media/stickiness.png){fig-align='center'}\n:::\n:::\n\n\n:::\n:::\n\nVirus fitness as function of virion binding ( $k_+$ ) and release ( $k_-$ ) rates. [Handel et al (2014) Proc Royal Soc Interface](http://rsif.royalsocietypublishing.org/content/11/92/20131083).\n\n## Exploration comments\n\n-   If the system/question is very simple, we might not need a model.\n-   Interactions among pathogens and the immune response are often complex. If we know little about our system and its behavior, building and exploring simple models is often a useful first step.\n\n\n## Back to bacteria\n\n-   Assume we think this model is a good approximation for a real system we are interested in.\n-   We want to explore/predict the peak burden of bacteria if we were able to increase the induction of the immune response (parameter $r$), e.g. by giving a drug.\n\n$$\n\\begin{aligned}\n\\dot{B} & = g B(1-\\frac{B}{B_{max}}) - d_B B - kBI\\\\\n\\dot{I} & = r BI - d_I I\n\\end{aligned}\n$$\n\n## Model Exploration\n\n1.  Choose some parameter values.\n2.  Run the simulation model.\n3.  Record quantities/outcomes of interest. <span style=\"color:blue;\">Here: $B$ at peak.</span>\n4.  Choose another set of parameter values (usually we only vary one at a time). <span style=\"color:blue;\">Here: $r$.</span>\n5.  Repeat steps 2-4 until you got all parameter-outcome pairs of interest.\n6.  Report (e.g. plot) your findings.\n\n\n## Exploration exercise\n\n-   We could do the model exploration by hand through the DSAIRM GUI for the \"Basic Bacteria Model\" (or any other) app.\n-   The *Bacteria Model Exploration* apps allows you to do some exploration graphically.\n-   **We could write R code that loops over parameters and repeatedly calls the underlying model ('Level 2' of the DSAIRM package tutorial).**\n\n\n## Exploration exercise\n\n* Start an R script. Write code that implements a loop over a parameter of your choice, for each value calls the `simulate_basicbacteria_ode()` model function, and computes some outcome of interest.\n* You can copy/paste/modify the solution from task 6 you looked at as homework.\n\n* If you want more of a challenge, use the _Extended Bacteria Model_ app and write some R code to loop over parameters of your choice and plot the results (whatever outcome you consider interesting to explore).\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}